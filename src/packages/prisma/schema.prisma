// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// # NEXT AUTH ADAPTER PRISMA

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  // Verifica existencia de roles y busca
  rolesMapper   Int       @default(0)
  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

// # ROLES

// ## rolerMapper bit-1
model Superadmin {
  id         Int      @id @default(autoincrement())
  userId     Int      @map(name: "user_id")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
  // # Por el momento un superadmin tiene todos los permisos, en un futuro configurar permisos
}

// ## rolerMapper bit-2
model Student {
  id         Int      @id @default(autoincrement())
  userId     Int      @map(name: "user_id")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
}

// # Core Objects

model Story {
  id String @id @default(uuid())
  titulo String
  synopsis String
  image String
  size Int
  sceneSize Int  

  actors ActorsOnStories[]
}

// Una historia tiene opciones y escenas, pero no se guardan en DB,

model Actor {
  id String @id @default(uuid())
  name String
  description String?

  stories ActorsOnStories[]
}

model ActorsOnStories {
  actor       Actor     @relation(fields: [actorId], references: [id])
  actorId     String  
  story       Story     @relation(fields: [storyId], references: [id])
  storyId     String 
  assignedAt  DateTime  @default(now())

  @@id([actorId, storyId])
}

model Terminology {
  id String @id @default(uuid())
  term String
  description String
  example String

  // No es requerido mostrar en UI
  createdBy String
}

